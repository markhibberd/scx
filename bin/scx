#!/bin/sh
#
# scx - a scala compilation utility with support for cross compilation
# 
# [project]     http://scx.mth.io
# [source]      https://github.com/markhibberd/scx
# [license]     3 point BSD 
#               https://github.com/markhibberd/scx/blob/master/LICENSE
#

usage() {
  echo "usage: `basename $0` [-j|--java VERSION] [-cp|-classpath CLASSPATH] [-x|--x-compile CONFIG] <src-directory> <trg-directory>"
  echo "  -j, --java VERSION           Include java source in compilation, using"
  echo "                               VERSION for both source and target flags of"
  echo "                               javac. The javac executable will be selected"
  echo "                               from PATH."
  # Left stupid for hysterical raisons and to be somewhat consistent with javac/scalac behaviour.
  # Fuck you jvm, fuck you and you stupid argument conventions. 
  echo " -cp, -classpath CLASSPATH     Specify the classpath, identical behaviour to"
  echo "                               scalac / javac -cp/-classpath, including globbing."
  echo " -x, --x-compile CONFIG        Specify cross compile. The compiler map is read from"
  echo "                               the config file, or if the config file is '-', then it"
  echo "                               is read from standard input. The config format:"
  echo "                                   SCALAC VERSION CLASSPATH"
}

while echo $1 | grep -q '^-'; do
  case $1 in
  -cp|-classpath) 
    shift
    CLASSPATH=$1
    ;;
  -j|--java)
    shift
    JAVA=true
    JAVA_VERSION=$1
    ;;
  -x|--x-compile)
    shift
    XCOMPILE=true
    XCONFIG=$1
    ;;
  --)
    shift
    break
    ;;
  *)
    echo "Unknown flag [$1]" 1>&2
    usage 2>&1
    ;;
  esac
  shift
done

if [ $# -ne 2 ]; then
  usage 1>&2  
  exit 1
fi

SRC_DIR="$1"
TRG_DIR="$2"

if [ ! -d "$TRG_DIR" ]; then
  echo "target directory [$TRG_DIR] does not exists." 1>&2
  exit 10
fi

: ${SOURCE_LIST:=$TRG_DIR/.scx.$$}
: ${JAVA_SOURCE_LIST:=$TRG_DIR/.scx.java.$$}
: ${CLASSPATH:=.}

find "$SRC_DIR" -name "*.scala" > "$SOURCE_LIST"

if [ x"$JAVA" = xtrue ]; then
  find "$SRC_DIR" -name "*.java" > "$JAVA_SOURCE_LIST"
  cat "$JAVA_SOURCE_LIST" >> "$SOURCE_LIST"
fi

compile() {
    SCALAC="$1"
    CLASSPATH="$2"
    TARGET="$3"

    mkdir -p "$TARGET"

    if ! type "$SCALAC" > /dev/null 2>&1; then
        echo "Could not find scala [$SCALA]." 1>&2
        exit 20
    fi

    "$SCALAC" -classpath "$CLASSPATH" -d "$TARGET" @"$SOURCE_LIST" || return $?

    if [ x"$JAVA" = xtrue ]; then
        if ! type "javac" > /dev/null 2>&1; then
            echo "Could not find javac [javac]." 1>&2
            exit 21
        fi
        javac -classpath "$CLASSPATH":"$TARGET" -source "$JAVA_VERSION" -target "$JAVA_VERSION" -d "$TARGET" @"$JAVA_SOURCE_LIST" || return $?
    fi

    return 0
}


if [ x"$XCOMPILE" = xtrue ]; then
    cat $XCONFIG | sed -e '/^$/d' | grep -v '^#' | while read SCALAC VERSION XCLASSPATH; do
	if [ -z "$VERSION" ]; then
            echo "Version tag must be specified for cross-compile target." 1>&2
            exit 22
	fi
        compile "$SCALAC" "$CLASSPATH:$XCLASSPATH" "$TRG_DIR/$VERSION" || exit $?
    done || exit $?
else
    compile scalac "$CLASSPATH" "$TRG_DIR" || exit $?
fi

# intentionally only cleanup on success, useful for debugging.
rm "$SOURCE_LIST"
[ x"$JAVA" = xtrue ] && rm "$JAVA_SOURCE_LIST"

exit 0
